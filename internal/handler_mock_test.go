// Code generated by MockGen. DO NOT EDIT.
// Source: learning/internal (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -typed -destination=handler_mock_test.go -package=internal . Repo
//
// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockRepo) Count(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRepoMockRecorder) Count(arg0 any) *RepoCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRepo)(nil).Count), arg0)
	return &RepoCountCall{Call: call}
}

// RepoCountCall wrap *gomock.Call
type RepoCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepoCountCall) Return(arg0 int64, arg1 error) *RepoCountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepoCountCall) Do(f func(context.Context) (int64, error)) *RepoCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepoCountCall) DoAndReturn(f func(context.Context) (int64, error)) *RepoCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateTimeZone mocks base method.
func (m *MockRepo) CreateTimeZone(arg0 context.Context, arg1 *TimeZone) (*TimeZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimeZone", arg0, arg1)
	ret0, _ := ret[0].(*TimeZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTimeZone indicates an expected call of CreateTimeZone.
func (mr *MockRepoMockRecorder) CreateTimeZone(arg0, arg1 any) *RepoCreateTimeZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimeZone", reflect.TypeOf((*MockRepo)(nil).CreateTimeZone), arg0, arg1)
	return &RepoCreateTimeZoneCall{Call: call}
}

// RepoCreateTimeZoneCall wrap *gomock.Call
type RepoCreateTimeZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepoCreateTimeZoneCall) Return(arg0 *TimeZone, arg1 error) *RepoCreateTimeZoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepoCreateTimeZoneCall) Do(f func(context.Context, *TimeZone) (*TimeZone, error)) *RepoCreateTimeZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepoCreateTimeZoneCall) DoAndReturn(f func(context.Context, *TimeZone) (*TimeZone, error)) *RepoCreateTimeZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteTimeZone mocks base method.
func (m *MockRepo) DeleteTimeZone(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTimeZone", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTimeZone indicates an expected call of DeleteTimeZone.
func (mr *MockRepoMockRecorder) DeleteTimeZone(arg0, arg1 any) *RepoDeleteTimeZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimeZone", reflect.TypeOf((*MockRepo)(nil).DeleteTimeZone), arg0, arg1)
	return &RepoDeleteTimeZoneCall{Call: call}
}

// RepoDeleteTimeZoneCall wrap *gomock.Call
type RepoDeleteTimeZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepoDeleteTimeZoneCall) Return(arg0 error) *RepoDeleteTimeZoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepoDeleteTimeZoneCall) Do(f func(context.Context, string) error) *RepoDeleteTimeZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepoDeleteTimeZoneCall) DoAndReturn(f func(context.Context, string) error) *RepoDeleteTimeZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListTimeZones mocks base method.
func (m *MockRepo) ListTimeZones(arg0 context.Context) ([]*TimeZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTimeZones", arg0)
	ret0, _ := ret[0].([]*TimeZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTimeZones indicates an expected call of ListTimeZones.
func (mr *MockRepoMockRecorder) ListTimeZones(arg0 any) *RepoListTimeZonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimeZones", reflect.TypeOf((*MockRepo)(nil).ListTimeZones), arg0)
	return &RepoListTimeZonesCall{Call: call}
}

// RepoListTimeZonesCall wrap *gomock.Call
type RepoListTimeZonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepoListTimeZonesCall) Return(arg0 []*TimeZone, arg1 error) *RepoListTimeZonesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepoListTimeZonesCall) Do(f func(context.Context) ([]*TimeZone, error)) *RepoListTimeZonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepoListTimeZonesCall) DoAndReturn(f func(context.Context) ([]*TimeZone, error)) *RepoListTimeZonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListTimeZonesByTimestamp mocks base method.
func (m *MockRepo) ListTimeZonesByTimestamp(arg0 context.Context, arg1 int64) ([]*TimeZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTimeZonesByTimestamp", arg0, arg1)
	ret0, _ := ret[0].([]*TimeZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTimeZonesByTimestamp indicates an expected call of ListTimeZonesByTimestamp.
func (mr *MockRepoMockRecorder) ListTimeZonesByTimestamp(arg0, arg1 any) *RepoListTimeZonesByTimestampCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimeZonesByTimestamp", reflect.TypeOf((*MockRepo)(nil).ListTimeZonesByTimestamp), arg0, arg1)
	return &RepoListTimeZonesByTimestampCall{Call: call}
}

// RepoListTimeZonesByTimestampCall wrap *gomock.Call
type RepoListTimeZonesByTimestampCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepoListTimeZonesByTimestampCall) Return(arg0 []*TimeZone, arg1 error) *RepoListTimeZonesByTimestampCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepoListTimeZonesByTimestampCall) Do(f func(context.Context, int64) ([]*TimeZone, error)) *RepoListTimeZonesByTimestampCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepoListTimeZonesByTimestampCall) DoAndReturn(f func(context.Context, int64) ([]*TimeZone, error)) *RepoListTimeZonesByTimestampCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReplaceAllBySource mocks base method.
func (m *MockRepo) ReplaceAllBySource(arg0 context.Context, arg1 []*TimeZone, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAllBySource", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceAllBySource indicates an expected call of ReplaceAllBySource.
func (mr *MockRepoMockRecorder) ReplaceAllBySource(arg0, arg1, arg2 any) *RepoReplaceAllBySourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAllBySource", reflect.TypeOf((*MockRepo)(nil).ReplaceAllBySource), arg0, arg1, arg2)
	return &RepoReplaceAllBySourceCall{Call: call}
}

// RepoReplaceAllBySourceCall wrap *gomock.Call
type RepoReplaceAllBySourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepoReplaceAllBySourceCall) Return(arg0 error) *RepoReplaceAllBySourceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepoReplaceAllBySourceCall) Do(f func(context.Context, []*TimeZone, string) error) *RepoReplaceAllBySourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepoReplaceAllBySourceCall) DoAndReturn(f func(context.Context, []*TimeZone, string) error) *RepoReplaceAllBySourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateTimeZone mocks base method.
func (m *MockRepo) UpdateTimeZone(arg0 context.Context, arg1 *TimeZone, arg2 []string) (*TimeZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimeZone", arg0, arg1, arg2)
	ret0, _ := ret[0].(*TimeZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTimeZone indicates an expected call of UpdateTimeZone.
func (mr *MockRepoMockRecorder) UpdateTimeZone(arg0, arg1, arg2 any) *RepoUpdateTimeZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimeZone", reflect.TypeOf((*MockRepo)(nil).UpdateTimeZone), arg0, arg1, arg2)
	return &RepoUpdateTimeZoneCall{Call: call}
}

// RepoUpdateTimeZoneCall wrap *gomock.Call
type RepoUpdateTimeZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RepoUpdateTimeZoneCall) Return(arg0 *TimeZone, arg1 error) *RepoUpdateTimeZoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RepoUpdateTimeZoneCall) Do(f func(context.Context, *TimeZone, []string) (*TimeZone, error)) *RepoUpdateTimeZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RepoUpdateTimeZoneCall) DoAndReturn(f func(context.Context, *TimeZone, []string) (*TimeZone, error)) *RepoUpdateTimeZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
