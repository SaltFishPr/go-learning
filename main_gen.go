package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *QryD) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "A":
			z.A, err = dc.ReadInt8()
			if err != nil {
				err = msgp.WrapError(err, "A")
				return
			}
		case "D":
			z.D, err = dc.ReadInt8()
			if err != nil {
				err = msgp.WrapError(err, "D")
				return
			}
		case "T":
			z.T, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "T")
				return
			}
		case "K":
			z.K, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "K")
				return
			}
		case "V":
			z.V, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "V")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *QryD) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "A"
	err = en.Append(0x85, 0xa1, 0x41)
	if err != nil {
		return
	}
	err = en.WriteInt8(z.A)
	if err != nil {
		err = msgp.WrapError(err, "A")
		return
	}
	// write "D"
	err = en.Append(0xa1, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt8(z.D)
	if err != nil {
		err = msgp.WrapError(err, "D")
		return
	}
	// write "T"
	err = en.Append(0xa1, 0x54)
	if err != nil {
		return
	}
	err = en.WriteString(z.T)
	if err != nil {
		err = msgp.WrapError(err, "T")
		return
	}
	// write "K"
	err = en.Append(0xa1, 0x4b)
	if err != nil {
		return
	}
	err = en.WriteString(z.K)
	if err != nil {
		err = msgp.WrapError(err, "K")
		return
	}
	// write "V"
	err = en.Append(0xa1, 0x56)
	if err != nil {
		return
	}
	err = en.WriteString(z.V)
	if err != nil {
		err = msgp.WrapError(err, "V")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *QryD) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "A"
	o = append(o, 0x85, 0xa1, 0x41)
	o = msgp.AppendInt8(o, z.A)
	// string "D"
	o = append(o, 0xa1, 0x44)
	o = msgp.AppendInt8(o, z.D)
	// string "T"
	o = append(o, 0xa1, 0x54)
	o = msgp.AppendString(o, z.T)
	// string "K"
	o = append(o, 0xa1, 0x4b)
	o = msgp.AppendString(o, z.K)
	// string "V"
	o = append(o, 0xa1, 0x56)
	o = msgp.AppendString(o, z.V)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QryD) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "A":
			z.A, bts, err = msgp.ReadInt8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "A")
				return
			}
		case "D":
			z.D, bts, err = msgp.ReadInt8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "D")
				return
			}
		case "T":
			z.T, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "T")
				return
			}
		case "K":
			z.K, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "K")
				return
			}
		case "V":
			z.V, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "V")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *QryD) Msgsize() (s int) {
	s = 1 + 2 + msgp.Int8Size + 2 + msgp.Int8Size + 2 + msgp.StringPrefixSize + len(z.T) + 2 + msgp.StringPrefixSize + len(z.K) + 2 + msgp.StringPrefixSize + len(z.V)
	return
}
